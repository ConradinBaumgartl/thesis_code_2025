facet_grid(genome~filter, scales = "free_y") +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram %>%
dplyr::filter(filter %in% c("ALL", "FILTSIZE")) %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_bar() +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(genome~filter, scales = "free_y") +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram %>%
dplyr::filter(filter %in% c("ALL", "FILTSIZE")) %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_bar(stat = "identity") +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(genome~filter, scales = "free_y") +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram %>%
dplyr::filter(filter %in% c("ALL", "FILTSIZE"), genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(genome~filter, scales = "free_y") +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram
histogram %>%
dplyr::filter(filter %in% c("ALL", "FILTSIZE"), genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(~filter, scales = "free_y")
histogram %>%
dplyr::filter(filter %in% c("ALL", "FILTSIZE"), genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue"))
histogram %>%
dplyr::filter(filter %in% c("ALL", "FILTSIZE"), genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line() +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(~filter) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram %>%
dplyr::filter(filter %in% c("ALL", "FILTSIZE"), genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line() +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(~filter) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
ggsave("results/read_size.histogram.png", width=6, height=6)
ggsave("results/read_size.histogram.svg", width=6, height=6)
histogram %>%
dplyr::filter(filter %in% c("ALL", "FILTSIZE"), genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line() +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(~filter) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
ggsave("results/read_size.histogram.png", width=6, height=4)
ggsave("results/read_size.histogram.svg", width=6, height=4)
histogram %>%
dplyr::filter(filter %in% c("ALL", "FILTSIZE"), genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line(linewidth=1, alpha=.5) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(~filter) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
ggsave("results/read_size.histogram.png", width=6, height=4)
ggsave("results/read_size.histogram.svg", width=6, height=4)
histogram %>%
dplyr::filter(filter =="ALL", genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line(linewidth=1, alpha=.5) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(~filter) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram %>%
dplyr::filter(filter =="ALL", genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line(linewidth=1, alpha=.5) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_grid(~mouseNr) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram %>%
dplyr::filter(filter =="ALL", genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line(linewidth=1, alpha=.5) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_wrap(~mouseNr, ncol=2) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram %>%
dplyr::filter(filter =="ALL", genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line(linewidth=1) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_wrap(~mouseNr, ncol=2) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram %>%
dplyr::filter(filter =="ALL", genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line(linewidth=1) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_wrap(~mouseNr, ncol=2) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
ggsave("results/read_size.histogram.ALL.png", width=6, height=4)
ggsave("results/read_size.histogram.ALL.svg", width=6, height=4)
histogram %>%
dplyr::filter(filter =="ALL", genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line(linewidth=1) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_wrap(~mouseNr, ncol=2) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
ggsave("results/read_size.histogram.ALL.png", width=6, height=6)
ggsave("results/read_size.histogram.ALL.svg", width=6, height=6)
histogram %>%
dplyr::filter(filter =="ALL", genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line(linewidth=.5) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_wrap(~mouseNr, ncol=2) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
histogram %>%
dplyr::filter(filter =="ALL", genome == "mouse") %>%
separate(sample_name, c("mod", "mouseNr", "tissue")) %>%
ggplot(aes(x=size, y=n, color=mouseNr)) +
geom_line(linewidth=.5) +
#geom_smooth(method = "loess", span=.5, se=F) +
facet_wrap(~mouseNr, ncol=2) +
scale_color_manual(values = c("#1e81b0", "#154c79", "#e28743", "#eab676"))
ggsave("results/read_size.histogram.ALL.png", width=6, height=6)
ggsave("results/read_size.histogram.ALL.svg", width=6, height=6)
df <- lapply(list.files("data/alignment/cmv_mouse/", pattern = ".nreads", full.names = T), get_metrics) %>%
bind_rows() %>% mutate(
ratio = AAV_genome_reads / mouse_genome_reads,
ratio_n = ratio / vg_dg
) %>%
separate(sample_name, c("modification", "mouse", "tissue"))
# change to a more descriptive name
df <- df %>%
mutate(
filter_type = str_replace(filter_type, "ALL", "all_reads"),
filter_type = str_replace(filter_type, "FILTSIZE", "no_dup+nuc_sized"),
filter_type = str_replace(filter_type, "FILT", "no_duplicates"),
filter_type = str_replace(filter_type, "SIZE", "nuc_sized"),
filter_type = factor(filter_type, levels = c("all_reads", "nuc_sized", "no_duplicates", "no_dup+nuc_sized"))
)
df %>% head()
df
df %>% dplyr::filter(filter == "ALL")
df
df %>% dplyr::filter(filter_type == "all_reads")
hist_fit_master <- read_csv("../shuffling_enrichment/hist_fit_master.csv") %>%
separate(step, c("selection", "step")) %>%
mutate(
replicate = as.character(replicate)) %>%
gather(key = "curve", value = "counts", -c(distance, dinucleotide, replicate, selection, step))
hist_fit_master <- read_csv("../shuffling_enrichment_tng/hist_fit_master.csv") %>%
separate(step, c("selection", "step")) %>%
mutate(
replicate = as.character(replicate)) %>%
gather(key = "curve", value = "counts", -c(distance, dinucleotide, replicate, selection, step))
hist_fit_master <- read_csv("../shuffling_enrichment_teng/hist_fit_master.csv") %>%
separate(step, c("selection", "step")) %>%
mutate(
replicate = as.character(replicate)) %>%
gather(key = "curve", value = "counts", -c(distance, dinucleotide, replicate, selection, step))
GOF_master <- read_csv("../shuffling_enrichment_teng/GOF_master.csv") %>%
mutate(replicate = as.character(replicate)) %>%
separate(step, c("selection", "step"))
hist_fit_master %>%
dplyr::filter(dinucleotide == "YY") %>%
ggplot(aes(x=distance, y=counts, unit = replicate, color = curve)) +
geom_line(lwd=.5, alpha=.51) +
xlim(0, 80) +
facet_grid(selection~step) +
scale_color_brewer(palette = "Set1")
hist_fit_master %>%
dplyr::filter(step == "2", dinucleotide == "YY", selection == "muscles") %>%
ggplot(aes(x=distance, y=counts, unit = replicate, color = curve)) +
geom_line(lwd=1, alpha=.5) +
xlim(0, 80) +
scale_color_manual(values=c("black", "red")) +
theme(text = element_text(size = 18))
ggsave("../shuffling_enrichment/plots/packaged_sequence_period.YY.png", width=7, height=5)
hist_fit_master %>%
dplyr::filter(dinucleotide == "YY") %>%
ggplot(aes(x=distance, y=counts, unit = replicate, color = curve)) +
geom_line(lwd=.5, alpha=.51) +
xlim(0, 80) +
facet_grid(selection~step) +
scale_color_brewer(palette = "Set1")
hist_fit_master %>%
dplyr::filter(step == "2", dinucleotide == "YY", selection == "muscles") %>%
ggplot(aes(x=distance, y=counts, unit = replicate, color = curve)) +
geom_line(lwd=1, alpha=.5) +
xlim(0, 80) +
scale_color_manual(values=c("black", "red")) +
theme(text = element_text(size = 18))
ggsave("../shuffling_enrichment_teng/plots/packaged_sequence_period.YY.png", width=7, height=5)
ggsave("../shuffling_enrichment_teng/plots/packaged_sequence_period.YY.svg", width=7, height=5)
prev_steps <- GOF_master %>%
dplyr::filter(selection %in% c("parental", "plasmid"))
GOF_plot_2 <- bind_rows(
GOF_master %>%
dplyr::filter(selection %in% c("muscles", "kidney")),
prev_steps %>%
mutate(selection = "muscles"),
prev_steps %>%
mutate(selection = "kidney")
)
GOF_plot_2 %>%
dplyr::filter(dinuc == "YY") %>%
mutate(
step = factor(step, levels=c("0", "1", "2", "3", "4"))) %>%
ggplot(aes(x=step, y=nGOF, fill=selection)) +
stat_summary(fun.y=median, geom="line", aes(group=selection, color=selection), position=position_dodge(0), linewidth=1, alpha=1) +
geom_boxplot(position=position_dodge(0), alpha=.6) +
geom_point() +
theme(text = element_text(size = 15))
ggsave("../shuffling_enrichment_teng/plots/nGOF_over_steps.YY.png", width=6, height=5)
ggsave("../shuffling_enrichment_teng/plots/nGOF_over_steps.YY.svg", width=6, height=5)
GOF_plot_2 %>%
dplyr::filter(dinuc == "YY") %>%
mutate(
step = factor(step, levels=c("0", "1", "2", "3", "4")),
inv_nGOF = 1 / nGOF) %>%
ggplot(aes(x=step, y=inv_nGOF, fill=selection)) +
stat_summary(fun.y=median, geom="line", aes(group=selection, color=selection), position=position_dodge(0), linewidth=1, alpha=1) +
geom_boxplot(position=position_dodge(0), alpha=.6) +
geom_point() +
theme(text = element_text(size = 15))
GOF_plot_2 %>%
dplyr::filter(dinuc == "YY") %>%
mutate(
step = factor(step, levels=c("0", "1", "2", "3", "4")),
inv_nGOF = 1 / nGOF) %>%
ggplot(aes(x=step, y=inv_nGOF, fill=selection)) +
stat_summary(fun.y=median, geom="line", aes(group=selection, color=selection), position=position_dodge(0), linewidth=1, alpha=1) +
geom_boxplot(position=position_dodge(0), alpha=.6) +
geom_point() +
theme(text = element_text(size = 15)) +
ylab("1 / nGOF")
GOF_plot_2 %>%
dplyr::filter(dinuc == "YY") %>%
mutate(
step = factor(step, levels=c("0", "1", "2", "3", "4")),
inv_nGOF = 1 / nGOF) %>%
ggplot(aes(x=step, y=inv_nGOF, fill=selection)) +
stat_summary(fun.y=median, geom="line", aes(group=selection, color=selection), position=position_dodge(0), linewidth=1, alpha=1) +
geom_boxplot(position=position_dodge(0), alpha=.6) +
geom_point() +
theme(text = element_text(size = 15)) +
ylab("1 / nGOF")
ggsave("../shuffling_enrichment_teng/plots/nGOF_over_steps.YY.png", width=6, height=5)
ggsave("../shuffling_enrichment_teng/plots/nGOF_over_steps.YY.svg", width=6, height=5)
df <- lapply(list.files("raw_data_renamed/", recursive = FALSE), function(x){
tmp <- read_csv(paste0("raw_data_renamed/", x)) %>%
mutate(name = str_replace(x, ".csv", ""))
return(tmp)
}) %>% bind_rows() %>%
separate(name, c("sample", "fraction", "dilution"))
df
pull(dilutions %>% unique()
df %>%
df %>%
pull(dilutions) %>% unique()
df %>%
pull(dilution) %>% unique()
df %>%
dplyr::filter(
calibrated_values >2000
) %>%
ggplot(aes(x=calibrated_values, fill=fraction)) +
geom_histogram(aes(y=..density..), bins = 100, position = "identity", alpha=.5) +
geom_density(alpha=.1) +
xlim(2000, 8000) +
facet_wrap(~sample, ncol=1)
df %>%
dplyr::filter(
fraction %in% c("empty", "F1", "F4"),
calibrated_values >2000
) %>%
ggplot(aes(x=calibrated_values, fill=fraction)) +
geom_histogram(aes(y=..density..), bins = 100, position = "identity", alpha=.75) +
geom_density(alpha=0) +
xlim(2000, 8000) +
facet_wrap(~sample, ncol=1)
df %>%
dplyr::filter(
fraction %in% c("empty", "F1", "F4"),
calibrated_values >2000
) %>%
unite("fraction", c(fraction, dilution))
ggplot(aes(x=calibrated_values, fill=fraction)) +
geom_histogram(aes(y=..density..), bins = 100, position = "identity", alpha=.75) +
geom_density(alpha=0) +
xlim(2000, 8000) +
facet_wrap(~sample, ncol=1)
df %>%
dplyr::filter(
fraction %in% c("empty", "F1", "F4"),
calibrated_values >2000
) %>%
unite("fraction", c(fraction, dilution)) %>%
ggplot(aes(x=calibrated_values, fill=fraction)) +
geom_histogram(aes(y=..density..), bins = 100, position = "identity", alpha=.75) +
geom_density(alpha=0) +
xlim(2000, 8000) +
facet_wrap(~sample, ncol=1)
df %>%
dplyr::filter(
fraction %in% c("empty", "F1", "F4"),
calibrated_values >2000
) %>%
unite("fraction", c(fraction, dilution)) %>%
ggplot(aes(x=calibrated_values, fill=fraction)) +
geom_histogram(bins = 100, position = "identity", alpha=.75) +
geom_density(alpha=0) +
xlim(2000, 8000) +
facet_wrap(~sample, ncol=1)
df %>%
dplyr::filter(
fraction %in% c("empty", "F1", "F4"),
calibrated_values >2000
) %>%
unite("fraction", c(fraction, dilution)) %>%
ggplot(aes(x=calibrated_values, fill=fraction)) +
geom_histogram(aes(y=..density..), bins = 100, position = "identity", alpha=.75) +
geom_density(alpha=0) +
xlim(2000, 8000) +
facet_wrap(~sample, ncol=1)
df %>%
dplyr::filter(
fraction %in% c("empty", "F1", "F4"),
calibrated_values >2000
) %>%
ggplot(aes(x=calibrated_values, fill=fraction)) +
geom_histogram(aes(y=..density..), bins = 100, position = "identity", alpha=.75) +
geom_density(alpha=0) +
xlim(2000, 8000) +
facet_wrap(~sample, ncol=1)
ggsave("figures/F1F4_peaks_wtf_lambda_empty.png", height=5, width=4, dpi=100)
ggsave("figures/F1F4_peaks_wtf_lambda_empty.svg", height=5, width=4, dpi=100)
df %>%
dplyr::filter(
fraction %in% c("empty", "F1", "F4"),
calibrated_values >2000
) %>%
ggplot(aes(x=calibrated_values, fill=fraction)) +
geom_histogram(bins = 100, position = "identity", alpha=.75) +
xlim(2000, 8000) +
facet_wrap(~sample, ncol=1)
df %>%
dplyr::filter(
fraction %in% c("empty", "F1", "F4"),
calibrated_values >2000
) %>%
ggplot(aes(x=calibrated_values, fill=fraction)) +
geom_histogram(aes(y=..density..), bins = 100, position = "identity", alpha=.75) +
geom_density(alpha=0) +
xlim(2000, 8000) +
facet_wrap(~sample, ncol=1)
mPeak = GRanges()
library(GenomicRanges)
library(GenomicRanges)
mPeak = GRanges()
## overlap with bam file to get count
list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed")
library(tidyverse)
}
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, ".")[[1]][1]
print(name)
})
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, ".")[[1]]
print(name)
})
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, ".")
print(name)
})
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\.")
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")
print(name)
})
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")[[1]][1]
print(name)
})
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")[[1]][1]
print(name)
})
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")[[1]][1]
})
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")[[1]][1]
peakRes <- read.table(paste0("data/alignment/cmv_mouse/", name, ".ALL.SEACR.stringent.bed"), header=F, fill=T)
mPeak <- GRanges(seqnames = peakRes$V1, IRanges(start = peakRes$V2, end = peakRes$V3), strand = "*") %>% append(mPeak, .)
})
masterPeak = reduce(mPeak)
mPeak = GRanges()
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")[[1]][1]
peakRes <- read.table(paste0("data/alignment/cmv_mouse/", name, ".ALL.SEACR.stringent.bed"), header=F, fill=T)
mPeak <- GRanges(seqnames = peakRes$V1, IRanges(start = peakRes$V2, end = peakRes$V3), strand = "*") %>% append(mPeak, .)
})
masterPeak = reduce(mPeak)
reduce(mPeak)
masterPeak = base::Reduce(mPeak)
masterPeak = reduce(mPeak)
library(tidyverse)
library(GenomicRanges)
mPeak = GRanges()
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")[[1]][1]
peakRes <- read.table(paste0("data/alignment/cmv_mouse/", name, ".ALL.SEACR.stringent.bed"), header=F, fill=T)
mPeak <- GRanges(seqnames = peakRes$V1, IRanges(start = peakRes$V2, end = peakRes$V3), strand = "*") %>% append(mPeak, .)
})
masterPeak = reduce(mPeak)
masterPeak = reduce(mPeak, .)
masterPeak = reduce(mPeak, c)
masterPeak = reduce(c, mPeak)
mPeak
mPeak <- GRanges()
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")[[1]][1]
peakRes <- read.table(paste0("data/alignment/cmv_mouse/", name, ".ALL.SEACR.stringent.bed"), header=F, fill=T)
mPeak <- GRanges(seqnames = peakRes$V1, IRanges(start = peakRes$V2, end = peakRes$V3), strand = "*") %>% append(mPeak, .)
})
masterPeak <- reduce(mPeak)
masterPeak <- reduce(mPeak, c)
masterPeak <- GenomicRanges::reduce(mPeak)
masterPeak
mPeak <- GRanges()
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")[[1]][1]
peakRes <- read.table(paste0("data/alignment/cmv_mouse/", name, ".ALL.SEACR.stringent.bed"), header=F, fill=T)
mPeak <- GRanges(seqnames = peakRes$V1, IRanges(start = peakRes$V2, end = peakRes$V3), strand = "*") %>% append(mPeak, .)
})
masterPeak <- GenomicRanges::reduce(mPeak)
masterPeak
View(masterPeak)
mPeak
library(tidyverse)
library(GenomicRanges)
mPeak <- GRanges()
## overlap with bam file to get count
lapply(list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed"), function(file){
name <- str_split(file, "\\.")[[1]][1]
peakRes <- read.table(paste0("data/alignment/cmv_mouse/", name, ".ALL.SEACR.stringent.bed"), header=F, fill=T)
mPeak <- GRanges(seqnames = peakRes$V1, IRanges(start = peakRes$V2, end = peakRes$V3), strand = "*") %>% append(mPeak, .)
})
masterPeak <- GenomicRanges::reduce(mPeak)
mPeak <- GRanges()
## overlap with bam file to get count
for (file in list.files("data/alignment/cmv_mouse/", pattern = ".stringent.bed")){
name <- str_split(file, "\\.")[[1]][1]
peakRes <- read.table(paste0("data/alignment/cmv_mouse/", name, ".ALL.SEACR.stringent.bed"), header=F, fill=T)
mPeak <- GRanges(seqnames = peakRes$V1, IRanges(start = peakRes$V2, end = peakRes$V3), strand = "*") %>% append(mPeak, .)
}
mPeak
masterPeak <- GenomicRanges::reduce(mPeak)
masterPeak
countMat = matrix(NA, length(masterPeak), length(histL)*length(repL))
countMat = matrix(NA, length(masterPeak), 4)
for (file in list.files("data/alignment/cmv_mouse/", pattern = ".ALL.bam")){
fragment_counts <- getCounts(file, masterPeak, paired = TRUE, by_rg = FALSE, format = "bam")
countMat[, i] = counts(fragment_counts)[,1]
i = i + 1
}
install.packages("DEseq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", version = "3.19")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
library(BiocManager)
BiocManager::install(version = '3.19')
BiocManager::install("DESeq2")
BiocManager::install("chromVAR")
